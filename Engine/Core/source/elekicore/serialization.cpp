#include "elekicore/serialization.hpp"

using namespace ElekiEngine;

const ElekiEngine::String ElekiEngine::Serialization::BinaryInformation::NAME = TXT("ELEKIBINARY");

//
// シリアライズ
// -----

// コンストラクタです
ElekiEngine::Serializer::Serializer(Ref<List<u8>> binary, Serialization::SerializeInfo *info)
	: mBinary(binary)
	, mInfo(info)
{}

//
// デシリアライズ
// -----

// コンストラクタです
ElekiEngine::Serialization::DataNode::DataNode(EBinarySign type)
	: type(type)
{}

// デストラクタです
ElekiEngine::Serialization::DataNode::~DataNode()
{}

// デシリアライズ用ノード構造体のコンストラクタを作成するマクロです
#define _ELEKICORE_SERIALIZATION_DATANODE_CONSTRUCTER(N, S) \
ElekiEngine::Serialization::N##DataNode::N##DataNode()             \
	: DataNode(EBinarySign::S)                                     \
{}
_ELEKICORE_SERIALIZATION_DATANODE_CONSTRUCTER(I8, I8);
_ELEKICORE_SERIALIZATION_DATANODE_CONSTRUCTER(U8, U8);
_ELEKICORE_SERIALIZATION_DATANODE_CONSTRUCTER(I16, I16);
_ELEKICORE_SERIALIZATION_DATANODE_CONSTRUCTER(U16, U16);
_ELEKICORE_SERIALIZATION_DATANODE_CONSTRUCTER(I32, I32);
_ELEKICORE_SERIALIZATION_DATANODE_CONSTRUCTER(U32, U32);
_ELEKICORE_SERIALIZATION_DATANODE_CONSTRUCTER(I64, I64);
_ELEKICORE_SERIALIZATION_DATANODE_CONSTRUCTER(U64, U64);
_ELEKICORE_SERIALIZATION_DATANODE_CONSTRUCTER(F32, F32);
_ELEKICORE_SERIALIZATION_DATANODE_CONSTRUCTER(F64, F64);
_ELEKICORE_SERIALIZATION_DATANODE_CONSTRUCTER(True, TRUE);
_ELEKICORE_SERIALIZATION_DATANODE_CONSTRUCTER(False, FALSE);
_ELEKICORE_SERIALIZATION_DATANODE_CONSTRUCTER(Nil, NIL);
_ELEKICORE_SERIALIZATION_DATANODE_CONSTRUCTER(Array, ARRAY);
_ELEKICORE_SERIALIZATION_DATANODE_CONSTRUCTER(Struct, STRUCT);
_ELEKICORE_SERIALIZATION_DATANODE_CONSTRUCTER(String, STRING);
_ELEKICORE_SERIALIZATION_DATANODE_CONSTRUCTER(Binary, BINARY);